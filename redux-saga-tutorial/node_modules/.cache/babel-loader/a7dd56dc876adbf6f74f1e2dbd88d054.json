{"ast":null,"code":"//align saga structure similar to redux actions: if you have a users file in your actions, you should have one in your sagas. it will take care of all the sagas relating to users actions.\n//creating first saga to get users list:\nimport { takeEvery, takeLatest, call, fork, put } from 'redux-saga/effects';\nimport * as actions from '../actions/users';\nimport * as api from '../api/users'; //function* is a generator function\n\nfunction* getUsers() {\n  try {\n    // once this call resolves, it will assign to result\n    const result = yield call(api.getUsers); // nothing below will happen until call finishes\n    // to send a redux success action, need to use sagas 'put'\n\n    yield put(actions.getUsersSuccess({\n      items: result.data.data\n    }));\n  } catch (e) {}\n}\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS_REQUEST, getUsers);\n}\n\nfunction* createUser(action) {\n  try {\n    yield call(api.createUser, {\n      firstName: action.payload.firstName,\n      lastName: action.payload.lastName\n    });\n  } catch (e) {}\n}\n\nfunction* watchCreateUserRequest() {\n  yield takeLatest(actions.Types.CREATE_USER_REQUEST, createUser);\n}\n\nconst usersSagas = [fork(watchGetUsersRequest), fork(watchCreateUserRequest)];\nexport default usersSagas;","map":{"version":3,"sources":["/Users/mark/Desktop/code/redux-saga/redux-saga-tut/src/sagas/users.js"],"names":["takeEvery","takeLatest","call","fork","put","actions","api","getUsers","result","getUsersSuccess","items","data","e","watchGetUsersRequest","Types","GET_USERS_REQUEST","createUser","action","firstName","payload","lastName","watchCreateUserRequest","CREATE_USER_REQUEST","usersSagas"],"mappings":"AAAA;AAEA;AACA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,GAA3C,QAAqD,oBAArD;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB,C,CAEA;;AACA,UAAUC,QAAV,GAAqB;AACnB,MAAG;AACD;AACA,UAAMC,MAAM,GAAG,MAAMN,IAAI,CAACI,GAAG,CAACC,QAAL,CAAzB,CAFC,CAGD;AACA;;AACA,UAAMH,GAAG,CAACC,OAAO,CAACI,eAAR,CAAwB;AAChCC,MAAAA,KAAK,EAAEF,MAAM,CAACG,IAAP,CAAYA;AADa,KAAxB,CAAD,CAAT;AAGD,GARD,CAQC,OAAMC,CAAN,EAAQ,CAER;AACF;;AAED,UAAUC,oBAAV,GAAiC;AAC/B,QAAMb,SAAS,CAACK,OAAO,CAACS,KAAR,CAAcC,iBAAf,EAAkCR,QAAlC,CAAf;AACD;;AAED,UAAUS,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAG;AACD,UAAMf,IAAI,CAACI,GAAG,CAACU,UAAL,EAAiB;AAACE,MAAAA,SAAS,EAAED,MAAM,CAACE,OAAP,CAAeD,SAA3B;AAAsCE,MAAAA,QAAQ,EAAEH,MAAM,CAACE,OAAP,CAAeC;AAA/D,KAAjB,CAAV;AACD,GAFD,CAEC,OAAMR,CAAN,EAAQ,CAER;AACF;;AAED,UAAUS,sBAAV,GAAmC;AACjC,QAAMpB,UAAU,CAACI,OAAO,CAACS,KAAR,CAAcQ,mBAAf,EAAoCN,UAApC,CAAhB;AACD;;AAED,MAAMO,UAAU,GAAG,CACjBpB,IAAI,CAACU,oBAAD,CADa,EAEjBV,IAAI,CAACkB,sBAAD,CAFa,CAAnB;AAKA,eAAeE,UAAf","sourcesContent":["//align saga structure similar to redux actions: if you have a users file in your actions, you should have one in your sagas. it will take care of all the sagas relating to users actions.\n\n//creating first saga to get users list:\nimport {takeEvery, takeLatest, call, fork, put} from 'redux-saga/effects';\nimport * as actions from '../actions/users';\nimport * as api from '../api/users';\n\n//function* is a generator function\nfunction* getUsers() {\n  try{\n    // once this call resolves, it will assign to result\n    const result = yield call(api.getUsers);\n    // nothing below will happen until call finishes\n    // to send a redux success action, need to use sagas 'put'\n    yield put(actions.getUsersSuccess({\n      items: result.data.data\n    }));\n  }catch(e){\n\n  }\n}\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS_REQUEST, getUsers);\n}\n\nfunction* createUser(action) {\n  try{\n    yield call(api.createUser, {firstName: action.payload.firstName, lastName: action.payload.lastName });\n  }catch(e){\n\n  }\n}\n\nfunction* watchCreateUserRequest() {\n  yield takeLatest(actions.Types.CREATE_USER_REQUEST, createUser);\n}\n\nconst usersSagas = [\n  fork(watchGetUsersRequest),\n  fork(watchCreateUserRequest)\n];\n\nexport default usersSagas;"]},"metadata":{},"sourceType":"module"}